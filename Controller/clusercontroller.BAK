* /// <summary>
* /// Clase User Controller
* /// </summary>
DEFINE CLASS clUserController as Custom
	oForm = .Null.
	oConnection = .Null.

	* /// <summary>
	* /// Procedimiento Init: Inicialización de la clase
	* /// </summary>
	* /// <paragramList>
	* /// 	<param Name="_oConnectionSQL">Conexión SQL</param>
	* /// </paragramList>
	PROCEDURE Init(_oConnection AS Object)
		This.oConnection = _oConnection
	ENDPROC

	* /// <summary>
	* /// Método IsValidKeyCode: Valida si el código de la tecla es permitido segun el tipo de textbox
	* /// </summary>
	* /// <paragramList>
	* /// 	<param Name="_oConnectionSQL">Conexión SQL</param>
	* /// </paragramList>
	PROCEDURE IsValidKeyCode( nKeyCode AS Number, nType AS Number )
		PRIVATE bIsValid
		
		IF nType == 0
			bIsValid = This.ValidateIsNumber( nKeyCode )
		ELSE
			bIsValid = This.ValidateIsName( nKeyCode )
		ENDIF
		
		This.PrintKeyPress( bIsValid )
	ENDPROC
	
	* /// <summary>
	* /// Función ValidateIsNumber: Validar si las teclas estan disponibles para un numero
	* /// </summary>
	HIDDEN FUNCTION ValidateIsNumber( nKeyCode As Number )
		LOCAL isValid AS Boolean

		isValid = .f.

		* Evaluo el campo
		DO CASE
			CASE nKeyCode >= 48 AND nKeyCode <= 57  && Números del 0 al 9
			
				isValid = .t.
				
			CASE INLIST(nKeyCode, 7, 127, 1, 6, 19, 4, 5, 24)  && Otras teclas permitidas
			
				isValid = .t.
				
		ENDCASE

		RETURN isValid
	ENDFUNC

	* /// <summary>
	* /// Función ValidateIsName: Validar si las teclas estan disponibles para un Nombre
	* /// </summary>
	HIDDEN FUNCTION ValidateIsName(nKeyCode)
		LOCAL AS Boolean

		isValid = .f.

		*!*	 * Evaluo el campo
		*!*	 DO CASE
		*!*	 	CASE nKeyCode >= 48 AND nKeyCode <= 57  && Números del 0 al 9
		*!*	 		isValid = .t.
		*!*	 	CASE INLIST(nKeyCode, 7, 127, 1, 6, 19, 4, 5, 24)  && Otras teclas permitidas
		*!*	 		isValid = .t.
		*!*	 ENDCASE

		RETURN isValid
	ENDFUNC
	
	* /// <summary>
	* /// Función IsEmpty: Valida si esta vacio
	* /// </summary>
	HIDDEN PROCEDURE PrintKeyPress(isValid AS Boolean)
		IF !isValid
			NODEFAULT
		ENDIF
	ENDPROC
	
	* /// <summary>
	* /// Función IsEmpty: Valida si esta vacio
	* /// </summary>
	PROCEDURE IsEmpty(cValue AS String)
		* Si no esta vacio
		IF !EMPTY(cValue)
			This.EnableButton( .t. )
		ELSE 
			This.EnableButton( .f. )
		ENDIF
	ENDPROC
	
	* /// <summary>
	* /// Función IsEmpty: Valida si esta vacio
	* /// </summary>
	* /// <paragramList>
	* /// 	<param Name="valueTextBox"></param>
	* /// </paragramList>
	HIDDEN PROCEDURE EnableButton(bEnabled  AS Boolean)
		This.oForm.oConfirmbutton.Enabled = bEnabled
	ENDPROC

	* /// <summary>
	* /// Función GetUser: Obtener un usuario
	* /// </summary>
	PROCEDURE GetUser()
		PRIVATE oFoundUser AS clUser, cValueCedula AS String
		
		cValueCedula = RTRIM( This.oForm.oContainer.oTextBoxCedula.Value )
		
		oFoundUser = This.SearchUserByCedula( cValueCedula )
	ENDPROC

	* /// <summary>
	* /// Función SearchUserByCedula: Buscar Usuario con el valor enviado por el usuario
	* /// </summary>
	HIDDEN FUNCTION SearchUserByCedula(cValue as String)
		LOCAL cQuery, oResult
		
		cQuery = "EXEC spGetUserByCedula @cedula = '"+ cValue +"';" 
		
		oResult = This.GetResultByQuery( cQuery )
		
		This.SetFullName( oResult )
	ENDFUNC
	
	HIDDEN FUNCTION GetResultByQuery(cQuery AS String)
		LOCAL oCmd AS Object
		
		oCmd = CREATEOBJECT("ADODB.Command")
		
		oCmd.ActiveConnection = This.oConnection.oConn
		
		oCmd.CommandText = cQuery
		
		oResult = oCmd.Execute()
		
		RETURN oResult
	ENDFUNC
	
	HIDDEN FUNCTION SetFullName(oResult AS Object)
		LOCAL cFullName
		
		IF NOT oResult.EOF
			cFullName	= oResult.Fields(0).value
		ELSE
			cFullName	= "No se encontraron resultados."
		ENDIF
		
	
		This.oForm.oContainer.oTextBoxFullName.Value = cFullName
	ENDFUNC

	* /// <summary>
	* /// Procedimiento SetupProcedures: Manejar la configuración inicial del formulario
	* /// </summary>
	PROCEDURE SetupProcedures()
		SET PROCEDURE TO ;
			"clContainer", ;
			"clLabel", ;
			"clTextbox", ;
			"clConfirmButton", ;
			"clCancelButton", ;
			"clUserList", ;
			"clUser";
		ADDITIVE
	ENDPROC

	* /// <summary>
	* /// Procedimiento CloseSetupProcedures: Manejar los eventos al cerrar el formulario
	* /// </summary>
	PROCEDURE CloseSetupProcedures()
		RELEASE PROCEDURE ;
			"clContainer", ;
			"clLabel", ;
			"clTextbox", ;
			"clConfirmButton", ;
			"clCancelButton", ;
			"clUserList", ;
			"clUser"
		This.oConnection.CloseConnection()
		This.oForm.Release()
	ENDPROC

	* /// <summary>
	* /// Procedimiento HandleError: Maneja errores en tiempo de ejecución
	* /// </summary>
	* /// <paragramList>
	* /// 	<param Name="nError">		Número del error	</param>
	* /// 	<param Name="cMethod">		Nombre del metodo	</param>
	* /// 	<param Name="nLine">		Número de linea		</param>
	* /// 	<param Name="cClassName">	Nombre de la clase	</param>
	* /// </paragramList>
	PROCEDURE HandleError(nError AS Number, cMethod AS String, nLine AS Number, cClassName AS String)
		LOCAL cMessage AS String, cErrorMessage AS String
			
		* Texto de la linea donde ocurre el error
		cErrorMessage = MESSAGE(nError)
		
		* Crear mensaje
		cMessage = ;
			"Error: " + TRANSFORM(nError) + CHR(13) + ; 		&& Número de error
			"Clase: " + cClassName + CHR(13) + ;				&& Nombre de la clase
			"Método: " + cMethod + CHR(13) + ;				&& Metodo donde ocurre
			"Línea: " + TRANSFORM(nLine) + " - " + cErrorMessage	&& Linea de código
		
		* Imprimir mensaje
		MESSAGEBOX(cMessage, 16, "Error en " + cClassName)
	ENDPROC
	
	* /// <summary>
	* /// Procedimiento Error: Maneja errores
	* /// </summary>
	* /// <paragramList>
	* /// 	<param Name="nError">		Número del error			</param>
	* /// 	<param Name="cMethod">	Nombre del Metodo			</param>
	* /// 	<param Name="nLine">		Número de la linea del error	</param>
	* /// </paragramList>
	PROCEDURE Error(nError AS Number, cMethod AS String, nLine AS Number)
		This.HandleError(nError, cMethod, nLine, This.Class)
	ENDPROC
ENDDEFINE